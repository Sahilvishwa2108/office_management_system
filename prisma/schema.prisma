// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PARTNER
  BUSINESS_EXECUTIVE
  BUSINESS_CONSULTANT
  PERMANENT_CLIENT
  GUEST_CLIENT
}

model User {
  id                      String         @id @default(uuid())
  name                    String
  email                   String         @unique
  phone                   String?        
  password                String?        
  passwordResetToken      String?        
  passwordResetTokenExpiry DateTime?     
  role                    UserRole       @default(BUSINESS_EXECUTIVE)
  isActive                Boolean        @default(true)  // Add this field
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  // Relations
  assignedTasks           Task[]         @relation("AssignedToUser")
  createdTasks            Task[]         @relation("AssignedByUser")
  messages                Message[]
  notificationsSent       Notification[] @relation("SentBy")
  notificationsReceived   Notification[] @relation("SentTo")
  clientInfo              Client?
  activities              Activity[]
}

model Client {
  id               String       @id @default(uuid())
  userId           String       @unique
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName      String?
  contactPerson    String?
  phone            String?
  address          String?
  isGuest          Boolean      @default(false)
  accessExpiry     DateTime?    // For guest clients
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  status       String       @default("pending") // "pending", "in-progress", "review", "completed"
  priority     String       @default("medium")  // "low", "medium", "high"
  dueDate      DateTime?
  assignedById String
  assignedBy   User         @relation("AssignedByUser", fields: [assignedById], references: [id])
  assignedToId String?
  assignedTo   User?        @relation("AssignedToUser", fields: [assignedToId], references: [id])
  attachments  Attachment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([assignedById])
  @@index([assignedToId])
}

model Attachment {
  id               String       @id @default(uuid())
  fileName         String
  fileUrl          String
  taskId           String?
  task             Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  messageId        String?
  message          Message?     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt        DateTime     @default(now())
}

model Message {
  id               String       @id @default(uuid())
  content          String
  senderId         String
  sender           User         @relation(fields: [senderId], references: [id])
  attachments      Attachment[]
  mentions         String[]     // Array of user IDs mentioned
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  description String?
  type        String   // "info", "success", "warning", "error"
  read        Boolean  @default(false)
  userId      String
  user        User     @relation("SentTo", fields: [userId], references: [id])
  senderId    String?
  sender      User?    @relation("SentBy", fields: [senderId], references: [id])
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([senderId])
}

model Activity {
  id        String   @id @default(uuid())
  type      String   // "user", "document", "task", "login", etc.
  action    String   // "created", "updated", "deleted", "completed", etc.
  target    String   // The item that was acted upon
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}
