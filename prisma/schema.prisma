// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PARTNER
  BUSINESS_EXECUTIVE
  BUSINESS_CONSULTANT
  // Clients are not users of the platform
}

model User {
  id                      String         @id @default(uuid())
  name                    String
  email                   String         @unique
  phone                   String?        
  password                String?        
  passwordResetToken      String?        
  passwordResetTokenExpiry DateTime?     
  role                    UserRole       @default(BUSINESS_EXECUTIVE)
  avatar                  String?
  isActive                Boolean        @default(true)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  updatedById             String?        // ID of the user who last updated this user
  // Relations
  assignedTasks           Task[]         @relation("AssignedToUser")
  createdTasks            Task[]         @relation("AssignedByUser")
  taskAssignments         TaskAssignee[] @relation("UserTaskAssignments")
  messages                Message[]
  notificationsSent       Notification[] @relation("SentBy")
  notificationsReceived   Notification[] @relation("SentTo")
  activities              Activity[]
  managedClients          Client[]       // Staff who manages clients
  taskComments            TaskComment[]
  clientHistories         ClientHistory[] @relation("CreatedBy")
  canApproveBilling       Boolean        @default(false) // Whether this user can approve billing
}

model Client {
  id             String       @id @default(uuid())
  contactPerson  String       // Name of the primary contact person
  companyName    String?      // Optional company name
  email          String?      // Optional email address
  phone          String?      // Optional phone number
  address        String?      // Optional address
  notes          String?      // Optional notes field
  gstin          String?      // Optional GSTIN (Goods and Services Tax Identification Number)
  isGuest        Boolean      @default(false) // Whether this is a temporary guest client
  accessExpiry   DateTime?    // When guest client access expires
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  managerId      String       // The staff member who manages this client
  manager        User         @relation(fields: [managerId], references: [id])
  tasks          Task[]       // Tasks associated with this client
  attachments    Attachment[] // Attachments related to this client
  history        ClientHistory[] // Client history entries
  credentials    Credential[] //Credentials associated with this client
  
  @@index([managerId])
  @@index([contactPerson]) // Index for searching by contact person name
  @@index([email])        // Index for searching by email
  @@index([phone])        // Index for searching by phone
}

model Task {
  id             String    @id @default(uuid())
  title          String
  description    String?
  status         String    @default("pending") 
  priority       String    @default("medium")  
  dueDate        DateTime?
  billingStatus  String?   @default("pending_billing") // "pending_billing", "billed", "paid"
  billingDate    DateTime?
  scheduledDeletionDate DateTime? // Add this field
  
  // Keep the original assignment fields (for backward compatibility)
  assignedById   String
  assignedBy     User      @relation("AssignedByUser", fields: [assignedById], references: [id])
  assignedToId   String?   // This will remain but become optional
  assignedTo     User?     @relation("AssignedToUser", fields: [assignedToId], references: [id])
  
  // Add new many-to-many relation
  assignees      TaskAssignee[]
  
  // Keep other existing relations
  client         Client?   @relation(fields: [clientId], references: [id])
  clientId       String?
  comments       TaskComment[]
  // Any other existing fields/relations
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([assignedById])
  @@index([assignedToId])
  @@index([clientId])
  @@index([billingStatus])
}

// New join table for many-to-many task assignments
model TaskAssignee {
  id          String    @id @default(uuid())
  taskId      String
  userId      String
  assignedAt  DateTime  @default(now())
  
  // Relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation("UserTaskAssignments", fields: [userId], references: [id], onDelete: Cascade)
  
  // Unique constraint
  @@unique([taskId, userId])
}

model Attachment {
  id          String   @id @default(uuid())
  filename    String
  path        String
  mimetype    String
  size        Int
  clientId    String?  // Optional relation to client
  client      Client?  @relation(fields: [clientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id])
  createdAt  DateTime @default(now())

  @@index([senderId])
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  content     String?
  isRead      Boolean  @default(false)
  taskId      String?  // Optional relation to task
  
  // Who sent the notification
  sentById    String
  sentBy      User     @relation("SentBy", fields: [sentById], references: [id])
  
  // Who received the notification
  sentToId    String
  sentTo      User     @relation("SentTo", fields: [sentToId], references: [id])
  
  createdAt   DateTime @default(now())

  @@index([sentById])
  @@index([sentToId])
}

model Activity {
  id        String   @id @default(uuid())
  type      String   // "client", "user", "task", "project", "document"
  action    String   // "created", "updated", "deleted", "assigned", "completed", "role_changed"
  target    String   // What was affected (name of client, user, task, etc.)
  details   Json?    // Additional context as JSON (optional)
  userId    String   
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([type])
  @@index([userId])
  @@index([createdAt])
}

model TaskComment {
  id          String    @id @default(uuid())
  content     String
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  attachments Json?     // Add this field to store attachment metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([taskId])
  @@index([userId])
}

model ClientHistory {
  id                String    @id @default(uuid())
  clientId          String
  client            Client    @relation(fields: [clientId], references: [id])
  content           String    // Description/content of the history entry
  type              String    @default("general")
  createdAt         DateTime  @default(now())
  createdById       String
  createdBy         User      @relation("CreatedBy", fields: [createdById], references: [id])
  pinned           Boolean   @default(false) // Whether this history entry is pinned for quick access
  
  // Task related fields
  taskId            String?
  taskTitle         String?
  taskDescription   String?
  taskStatus        String?
  taskCompletedDate DateTime?
  taskBilledDate    DateTime?
  billingDetails    Json?

  @@index([clientId])
  @@index([createdById])
  @@index([taskId])
}

model Credential {
  id        String   @id @default(uuid())
  title     String
  username  String
  password  String
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}
